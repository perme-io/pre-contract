version = '0.9.0'

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'foundation.icon:icon-sdk:2.5.2'
    }
}

dependencies {
    compileOnly 'foundation.icon:javaee-api:0.9.6'
    implementation 'foundation.icon:javaee-scorex:0.5.4.1'
    implementation 'com.github.sink772:minimal-json:0.9.7'
    implementation project(':utils')

    testImplementation 'foundation.icon:javaee-unittest:0.12.2'
    testImplementation 'org.mockito:mockito-core:5.13.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.3'

    testImplementation 'org.web3j:crypto:5.0.0'
    testImplementation 'foundation.icon:icon-sdk:2.5.2'
    testImplementation fileTree(dir: '../libs', include: 'icon-did-*.jar')
}

optimizedJar {
    dependsOn(project(':utils').jar)
    mainClassName = 'com.iconloop.score.pds.PdsPolicy'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

String getConfigOrDefault(String propName, String envName, String defaultValue) {
    if (rootProject.hasProperty(propName)) {
        return rootProject.property(propName) as String
    }
    return System.getenv().getOrDefault(envName, defaultValue)
}

ext {
    rpcUri = getConfigOrDefault('rpcUri', 'GOLOOP_RPC_URI', 'http://localhost:9080/api/v3')
    rpcNid = ContractTask.asInteger(getConfigOrDefault('rpcNid', 'GOLOOP_RPC_NID', '0x1'))
    rpcKsName = getConfigOrDefault('keystoreName', 'GOLOOP_RPC_KEY_STORE', '')
    rpcKsPass = getConfigOrDefault('keystorePass', 'GOLOOP_RPC_KEY_PASS', '')
    def rpcKsSecret = new File(getConfigOrDefault('keystoreSecret', 'GOLOOP_RPC_KEY_SECRET', ''))
    if (rpcKsSecret.canRead()) {
        rpcKsPass = new String(rpcKsSecret.readBytes())
    }
    deployTarget = null
    if (rootProject.hasProperty('deployTarget')) {
        deployTarget = rootProject.property('deployTarget')
    }
}

deployJar {
    endpoints {
        lisbon {
            uri = 'https://lisbon.net.solidwallet.io/api/v3'
            nid = 0x2
            to = deployTarget
        }
        local {
            uri = 'http://localhost:9082/api/v3'
            nid = 0x3
            to = deployTarget
        }
        rpc {
            uri = rpcUri
            nid = rpcNid
            to = deployTarget
        }
    }
    keystore = rpcKsName
    password = rpcKsPass
    parameters {
    }
}

test {
    useJUnitPlatform()
}

import com.parameta.gradle.ContractTask
import com.parameta.gradle.ContractCallTask
import foundation.icon.icx.data.Address

abstract class PRECallTask extends ContractCallTask {
    PRECallTask() {
        group = "PRE Contract"
        contract.convention(asAddress(System.getenv('PRE_CONTRACT')))
    }

    @Option(option="preContract", description="PRE Contract address (env:PRE_CONTRACT)")
    void optionPREContract(String s) {
        setContractOption(s)
    }
}

tasks.register('getMinStakeValue', PRECallTask) {
    method = 'min_stake_for_serve'
    description = 'Get min stake value of contract'
    doOnQuery {
        print(asRpcString(it))
    }
}

tasks.register('allNode', PRECallTask) {
    method = 'all_node'
    description = 'List all registered nodes'
}

abstract class PRETaskAddNode extends PRECallTask {
    @Input
    abstract Property<String> getNodePeerId()

    @Option(option="peerId", description = "PeerID of the node to add")
    void optionPeerId(String v) {
        nodePeerId.set(v)
    }

    @Input
    abstract Property<String> getNodeEndpoint()

    @Option(option="endpoint", description = "Multi address of the node to register")
    void optionEndpoint(String v) {
        nodeEndpoint.set(v)
    }

    @Input
    abstract Property<String> getNodeName()

    @Option(option="name", description = "Name of the node to register")
    void optionName(String v) {
        nodeName.set(v)
    }

    @Input
    @Optional
    abstract Property<String> getNodeComment()

    @Option(option="comment", description = "Description of the node to register")
    void optionComment(String v) {
        nodeComment.set(v)
    }

    @Input
    @Optional
    abstract Property<Address> getNodeOwner()

    @Option(option="owner", description = "Owner of the node to register")
    void optionNodeOwner(String v) {
        nodeOwner.set(asAddress(v))
    }
}

tasks.register('addNode', PRETaskAddNode) {
    method = 'add_node'
    description = 'Register a node to the contract'
    params.put('peer_id', providers.provider { asRpcItem(nodePeerId.get()) })
    params.put('endpoint', providers.provider { asRpcItem(nodeEndpoint.get()) })
    params.put('name', providers.provider { asRpcItem(nodeName.get()) })
    params.put('comment', providers.provider { asRpcItem(nodeComment.getOrElse("")) })
    params.put('owner', providers.provider { asRpcItem(nodeOwner.getOrNull()) })
}

abstract class PRETaskRemoveNode extends PRECallTask {
    @Input
    abstract Property<String> getNodePeerId()

    @Option(option="peerId", description = "PeerID of the node to add")
    void optionPeerId(String v) {
        nodePeerId.set(v)
    }
}

tasks.register('removeNode', PRETaskRemoveNode) {
    method = "remove_node"
    description = 'Unregister the node from the contract'
    params.put('peer_id', providers.provider { asRpcItem(nodePeerId.get()) })
}
